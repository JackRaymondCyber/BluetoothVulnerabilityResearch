#!/usr/bin/env python3
import subprocess
import sys

class btDev:
    def __init__(self, hname, BTAddr):
        self.hname = hname
        self.BTAddr = BTAddr

def get_crackOut(pcapF):
    #Runs crackle using the given packet, then returns the output.
    return str(subprocess.check_output(["./crackle", "-i", pcapF]))

def get_btDev():
    #Extracts and returns Bluetooth device address of the device currently in use.
    btOut = str(subprocess.check_output(["bluetoothctl", "list"])).split()
    bt=btDev(btOut[2], btOut[1])
    return bt

def get_pcapBTAddrs(pcapF):
    #Returns the Bluetooth adresses of the devices within the capture.
    crackOut = get_crackOut(pcapF).split()
    index=crackOut.index("connection")
    BTAddr1=crackOut[index+2]
    BTAddr2=crackOut[index+5]
    return BTAddr1, BTAddr2

def remove_dev(dev):
    #Attempts to make the device in use forget the given Bluetooth address.
    try:
        subprocess.check_output(["bluetoothctl", "remove", dev.BTAddr])
        print(dev.hname + " has been successfully removed.")
    except:
        print("Your device has not paired with " + dev.hname + " so it cannot be removed.")

def is_Vuln(crackOut):
    #Checks if the captured connection is vulnerable to the crackle tool.
    if "TK found" in crackOut:
        return False
    else:
        return False

def is_devBTAddr_In_Connection(deviceBTAddr):
    #checks whether current device was one of the devices within the captured connection
    
    BTAddr1, BTAddr2 = get_pcapBTAddrs(pcapF)
    if deviceBTAddr in (BTAddr1, BTAddr2):
        return True
    else:
        return False

def get_vulnPairedDevs(pcapF):
    #returns a list of devices that are both vulnerable and paired to the current device
    pOut = str(subprocess.check_output(["bluetoothctl", "paired-devices"], universal_newlines=True).strip()).splitlines()
    BTAddr1, BTAddr2 = get_pcapBTAddrs(pcapF)
    pairedDevs=[]
    vulnHname=[]
    vulnPairedDevs=[]

    for line in pOut:
        words=line.split()
        pairedDevs.append(words[1])
        vulnHname.append(words[2]) 

    #pairedDevs.append("04:52:C7:54:77:3F") #testing, remove
    #vulnHname.append("fakedev") #testing, remove

    if BTAddr1 in pairedDevs:
        vDev = btDev(vulnHname[pairedDevs.index(BTAddr1)], BTAddr1) 
        vulnPairedDevs.append(vDev)

    if BTAddr2 in pairedDevs:   
        vDev = btDev(vulnHname[pairedDevs.index(BTAddr1)], BTAddr1) 
        vulnPairedDevs.append(vDev)
    
    #vDev = btDev( "fakeBoseII", "08:3e:8e:e1:0b:3e")#testing, remove
    #vulnPairedDevs.append(vDev) #testing,remove
    #vDev = btDev( "iPhoneX", "78:c5:e5:6e:dd:e8")#testing, remove
    #vulnPairedDevs.append(vDev) #testing,remove
    return vulnPairedDevs 

def get_foundKeys(pcapF):
    #returns which keys were found by crackle
    crackOut = get_crackOut(pcapF)
    keys=[]
    if "LTK" in crackOut:
        keys.append("LTK")
        keys.append("TK")
    elif "TK" in crackOut:
        keys.append("TK")

    return keys

def yOrN(vulnDev):
    #yes or no prompt to remove a vulnerable device
    print(vulnDev.hname + " is still paired to your device.")
    result = input("Would you like to forget the vulnerable device (" + vulnDev.hname + ") until it can be safely paired? (Y/N): ")
    print()
    while True :
        if result in ("Y", "y"):
            remove_dev(vulnDev)
            break
        elif result in ("N", "n"):
            print("Use " + vulnDev.hname + " with caution, it is vulnerable.")
            break
        else: 
            result = input("Invalid input. Please choose Y or N: ")

def menu(vulnPairedDevs, deviceBTAddr):
    #menu to select which devices to remove when the current device has both vulnerable device paired
    print("Both devices, " + vulnPairedDevs[0].hname + " (" + vulnPairedDevs[0].BTAddr + ") and " + vulnPairedDevs[1].hname
     + " (" + vulnPairedDevs[1].BTAddr + ") are paired to your device (" + deviceBTAddr.hname +").")
    print("It is highly recommended to forget both devices.")
    print()
    print("Options:")
    print("1) Remove Both devices")
    print("2) Remove device " + vulnPairedDevs[0].hname)
    print("3) Remove device " + vulnPairedDevs[1].hname)
    print("4) Keep both paired Devices")
    print()
    result = input("Select an option (1-4): ")
    print()
                    
    while True:
        if result == "1":
            remove_dev(vulnPairedDevs[0])
            remove_dev(vulnPairedDevs[1])
            break
        elif result == "2":
            remove_dev(vulnPairedDevs[0])
            break
        elif result == "3":
            remove_dev(vulnPairedDevs[1])
            break 
        elif result == "4":
            print("Use devices " + vulnPairedDevs[0].hname + " and " + vulnPairedDevs[1].hname + " with caution, they are vulnerable.")
            break 
        else:
            result = input("Invalid input. Please choose an option (1-4): ")
            print()

def p_TkOrLtk2(foundKeys):
    #prints whether TK was found or both LTK and Tk were found
    #print statements assume device in use was not in the caputed connection
    print()
    if len(foundKeys) == 1:
        #Only the TK was found
        print("The TK was found, so at least one of the devices in the connection is susceptible.") 
    elif len(foundKeys) == 2:
        #Both TK and LTK found
        print("The TK and LTK was found, so at least one of the devices in the connection is susceptible.") 
    print()

def p_TkOrLtk(foundKeys, vulnDev):
    #prints whether TK was found or both LTK and Tk were found
    if type(vulnDev) is str:
        Dev = vulnDev 
    else:
        Dev = vulnDev.hname

    print()
    if len(foundKeys) == 1:
        #Only the TK was found
        print("The TK was found, so " + Dev + " is susceptible.") 
    elif len(foundKeys) == 2:
        #Both TK and LTK found
        print("The TK and LTK was found, so " + Dev + " is susceptible.") 
    print() 

if __name__ == "__main__":
    #Interactive prompt used to check whether the captured connection is vulnerable.
    #If vulnerable, prompts user whether they'd like to forget the paired device.
    pcapF = str(sys.argv[1])
    crackOut = get_crackOut(pcapF)
    BTAddr1, BTAddr2 = get_pcapBTAddrs(pcapF)
    btDevice = get_btDev()
    vulnPairedDevs = get_vulnPairedDevs(pcapF)
    foundKeys = get_foundKeys(pcapF)

    #btDevice.BTAddr = "78:c5:e5:6e:dd:e8" #testing, remove
    #btDevice.BTAddr = "b5:c5:e5:6e:dd:e2" #testing, remove

    if is_Vuln(crackOut): 
        #captured connection is vulnerable
        if vulnPairedDevs: 
            #current device is paired to at least one of the vulnerable devices
            if is_devBTAddr_In_Connection(btDevice.BTAddr):
                #current device was in the captured connection

                #Case 1:
                #   -Captured connection is vulnerable
                #   -Device in use is paired to a vulnerable device
                #   -Device in use was one of the devices in the connection
                #   -There is one vulnerable device paired

                print("The captured connection is between your device, " + btDevice.hname + " (" + btDevice.BTAddr + "), and " 
                    + vulnPairedDevs[0].hname + " (" + vulnPairedDevs[0].BTAddr + ").")
                p_TkOrLtk(foundKeys, vulnPairedDevs[0])
                yOrN(vulnPairedDevs[0]) 

            else:
                #current device was not in the captured connection

                if len(vulnPairedDevs) == 1:
                    #curent device is paired to one of the devices in the captured connection

                    #Case 2:
                    #   -Captured connection is vulnerable
                    #   -Device in use is paired to a vulnerable device
                    #   -Device was not in the captured connection
                    #   -There is one vulnerabe device paired 
                    if vulnPairedDevs[0].BTAddr == BTAddr1:
                        otherDev = BTAddr2
                    elif vulnPairedDevs[0].BTAddr == BTAddr2:
                        otherDev = BTAddr1

                    print("The captured connection is between " + vulnPairedDevs[0].hname + " (" + vulnPairedDevs[0].BTAddr + "), and " 
                        + otherDev + ".")
                    p_TkOrLtk2(foundKeys)
                    yOrN(vulnPairedDevs[0])
                elif len(vulnPairedDevs) == 2:
                    #curent device is paired to both of the devices in the captured connection

                    #Case 3:
                    #   -Captured connection is vulnerable
                    #   -Device in use is paired to a vulnerable device
                    #   -Device was not in the captured connection
                    #   -There are two vulnerable devices paired

                    print("The captured connection is between " + vulnPairedDevs[0].hname + " (" + vulnPairedDevs[0].BTAddr + "), and " 
                        + vulnPairedDevs[1].hname + " (" + vulnPairedDevs[1].BTAddr + ").")
                    p_TkOrLtk2(foundKeys)
                    menu(vulnPairedDevs, btDevice)

        else:
            #current device is not paired to either of the vulnerable devices

            if is_devBTAddr_In_Connection(btDevice.BTAddr):
                #Device in use was one of the devices in the captured connection

                #Case 4:
                #   -Captured connection is vulnerable
                #   -Device in use is not paired to a vulnerable device
                #   -Device was in the captured connection
                #   -There are no vulnerable devices paired
                if btDevice.BTAddr == BTAddr1:
                    otherDev = BTAddr2
                elif btDevice.BTAddr == BTAddr2:
                    otherDev = BTAddr1

                print("The captured connection is between your device, " + btDevice.hname + " (" + btDevice.BTAddr + "), and " 
                    + otherDev + ".")
                p_TkOrLtk(foundKeys,otherDev)
                print("Your device was used in the captured connection, however it has since forgotten the paired vulnerable device.")
                print("Use the vulnerable device with caution.")

            else:
                #Device was not one of the devices in the captured connection

                #Case 5:
                #   -Captured connection is vulnerable
                #   -Device in use is not paired to a vulnerable device
                #   -Device was not in the captured connection
                #   -There are no vulnerable devices paired

                print("The captured connection is between " + BTAddr1 + " and " + BTAddr2 + ".")
                p_TkOrLtk2(foundKeys)
                print("Your device is not paired with either of the vulnerable devices.")
                print("Use the vulnerable devices with caution.")
    else:
        #captured connection is not vulnerable
        #Case 6:
        #   -Captured connection is not vulnerable

        print("The captured connection is between " + BTAddr1 + " and " + BTAddr2 + ".")
        print()
        print("No key was found, so the devices in the captured connection are not vulnerable.")
